XXXXX These are now in the main manual. Perhaps we can delete this XXXXX

Stuff not there yet...

Order of optimizations are...

    mk_pass::<nop::Pass>,
    mk_pass::<print::Pass>,
    mk_pass::<optimizer_step1::Pass>,
    mk_pass::<nop_removal::Pass>,
    mk_pass::<register_reuse::Pass>,



These are an idiot guide to using/testing the assembler.

To make binaries and run it
  cargo run --bin scasm somefile.asm

The binary has a bunch of flags to change what kind of output you want, they are documented under
  cargo run --bin scasm -- --help

If you want to go from an `.asm` file to a `.bc` file, all you need is

  cargo run --bin scasm -- input_file.asm output_file.bc

To run all tests in the test directory
  cargo test

To run all tests in the scasm-tests directory
  - In the main SCALE directory run
      ./Scripts/compile-scasm
  - This creates the asm files in the scasm-tests directory
  - To run all tests execute    
      cargo run --bin scasm_tests --release

Note the `--release` flag which compiles `scasm` with optimizations so it's much faster.
The optimizations `scasm` runs on the assembly files are not affected by the `--release` flag.

Entry point is main.rs
  - Reads input
  - Parses
  - Optimizes
  - Prints out
  - or Outputs ByteCode

Library to do implementation of stuff is lib.rs

The lexer is pretty robust so should not need editing

asm - A Body is a file
      A Body is split into Blocks
        - Each Block is terminated by a jmp instruction
      A Body contains Statements

To add new instructions you need to
  a) Add these to the parser to read stuff in
  b) Add these to the relexer to get stuff out
  c) Eventually output bytecode

In relexer note that an instruction needs two arguments,
even if none are present. See for example the VMControl
instructions...
  Instruction::VMControl(instr) => (instr, vec![])

The assembler also produces a .dot file to visualize
the blocks etc using Graphviz

IMPORTANT:

When editing always do
  cargo fmt
to format the files


To turn on the debug output you can set the
    export RUST_LOG=scasm::transforms::optimizer_step1
environment flag to turn on all of the debug printing in the
`transforms::optimizer_step1` module.  The same goes for any other module.

To only print out debug info use...
    export RUST_LOG=scasm::transforms::optimizer_step1=debug
    



LaTeX Documentation...

It is generated by running `cargo test generate_instruction_tex_table`
which is implemented in `tests/gen_tex.rs`

The instructions are documented in src/binary/instructions.rs

When you run `cargo test`, the `documentation_legacy/instructions.tex` is
updated automatically if you change `instructions.rs`.

The same goes for the `.stderr` files: if you change `instructions.rs`
and now the instructions exist, the errors will disappear.

