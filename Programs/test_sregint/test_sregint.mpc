a = 5424
b = 3543

ca = regint(a)
cb = regint(b)
sa = sregint(a)
sb = sregint(b)

test(sregint(10))
test(regint(1))

#test LDSINT
test(ca)
test(sb)

#test  MOVSINT, CONVREGSREG, CONVSREGSINT
test(regint(ca))
test(sregint(sa))
test(sregint(ca))
test(sint(sa))

sia=sint(a)
convert1=sregint(sia)
convert2=sregint(-sia)
test(convert1,sia)
test(convert2,-sia)

#test CONVSUREGSINT
big_a=2**64-a
saa=sregint(big_a)
siaa=sint(big_a)


te=sint.convert_unsigned_to_sint(saa)
test(siaa, te)
te=sint.convert_unsigned_to_sint(sa)
test(sia, te)

# test CONVSBITSINT, CONVSINTSBIT, bit->sregint
a0 = sint(0)
a1 = sint(1)
b0 = sbit(0)
b1 = sbit(1)
d0 = sregint(0)
d1 = sregint(1)
ca0=sbit(a0)
ca1=sbit(a1)
cb0=sint(b0)
cb1=sint(b1)
c0=sregint(b0)
c1=sregint(b1)
test(ca0,b0)
test(ca1,b1)
test(cb0,a0)
test(cb1,a1)
test(c0,d0)
test(c1,d1)

# Test again to make sure...
d0 = sregint(0)
d1 = sregint(1)
ca0=sbit(a0)
ca1=sbit(a1)
cb0=sint(b0)
cb1=sint(b1)
c0=sregint(b0)
c1=sregint(b1)
test(ca0,b0)
test(ca1,b1)
test(cb0,a0)
test(cb1,a1)
test(c0,d0)
test(c1,d1)


#test ADDSINT, ADDSINTC
test(ca + cb)
test(sa + cb)
test(ca + sb)
test(sa + sb)

test(ca + b)
test(a + cb)
test(sa + b)
test(a + sb)

#test SUBSINT, SUBSINTC, SUBCINTs
test(ca - cb)
test(sa - cb)
test(ca - sb)
test(sa - sb)

test(ca - b)
test(a - cb)
test(sa - b)
test(a - sb)

#test MULSINT, MULSINTC
test(ca * cb)
test(sa * cb)
test(ca * sb)
test(sa * sb)

test(ca * b)
test(a * cb)
test(sa * b)
test(a * sb)

#test DIVSINT (tests all combinations and signs)
divisible = a - a % b
test(regint(divisible) / cb) 
test(regint(divisible) / b) 
test(regint(divisible) / sb) 
test(divisible / cb) 
test(divisible / sb) 
test(sregint(divisible) / cb) 
test(sregint(divisible) / b) 
test(sregint(divisible) / sb)

test(regint(-divisible) / cb)
test(regint(-divisible) / b)
test(regint(-divisible) / sb)
test((-divisible) / cb)
test((-divisible) / sb)
test(sregint(-divisible) / cb)
test(sregint(-divisible) / b)
test(sregint(-divisible) / sb)

test(regint(divisible) / (-cb))
test(regint(divisible) / (-b))
test(regint(divisible) / (-sb))
test(divisible / (-cb))
test(divisible / (-sb))
test(sregint(divisible) / (-cb))
test(sregint(divisible) / (-b))
test(sregint(divisible) / (-sb))

test(regint(-divisible) / (-cb))
test(regint(-divisible) / (-b))
test(regint(-divisible) / (-sb))
test((-divisible) / (-cb))
test((-divisible) / (-sb))
test(sregint(-divisible) / (-cb))
test(sregint(-divisible) / (-b))
test(sregint(-divisible) / (-sb))


#test SHR/SHL
cc=regint(3)
test(sa << 3)
test(sb << 11)
saa=sa << 3
sbb=sb << 11
test(saa >> 3)
test(sbb >> 3)
test(ca << 3)
test(cb >> 3)
test(ca << cc)
test(ca >> cc)

# test INT MAX (instructions for sr to sr only)
int_max = sregint(2**(64-1) - 1)
int_min = sregint(-2**(64-1))
test(1 - int_max < sregint(0))
test(int_max - 1 <= int_max)
test(int_max - 1 >= int_max)
test(int_max - 1 < int_max)
test(int_max - 1 > int_max)
test(int_min < int_min + 1)
test(int_min <= int_min + 1)
test(int_min <= int_min)
test(int_max >= sregint(0)) # sr to sr only
# test(int_min <= sregint(1)) # sr to sr only    ## Will fail due to wrap around
# test(int_min < int_max)    ## Will fail due to wrap around
# test(int_min > int_max)    ## Will fail due to wrap around
test(int_max == sregint(0)) # sr to sr only
test(int_min == sregint(0)) # sr to sr only
test(int_min == int_max)
test(int_min == int_min)
test(int_max == int_max)

#test LTSINT, GTSINT EQSINT (instructions for sr to sr only)
test(sa < sb)
test(sa < sa)
test(sa < sa + 1)
test(-sa < sa)
test(-sb < sb)
test(sa < -sb)
test(-sa < -sb)

test(sa > sb)
test(sa > sa)
test(sa > sa + 1)
test(-sa > sa)
test(-sb > sb)
test(sa > -sb)
test(-sa > -sb)

test(sa <= sb)
test(sa <= sa)
test(sa <= sa + 1)
test(-sa <= sa)
test(-sb <= sb)
test(sa <= -sb)
test(-sa <= -sb)

test(sa >= sb)
test(sa >= sa)
test(sa >= (sa + 1))
test(-sa >= sa)
test(-sb >= sb)
test(sa >= -sb)
test(-sa >= -sb)

test(sa == sb)
test(sa == sa)
test(sa == sa + 1)
test(-sa == sa)
test(-sb == sb)
test(sa == -sb)
test(-sa == -sb)

test(sa != sb)
test(sa != sa)
test(sa != sa + 1)
test(-sa != sa)
test(-sb != sb)
test(sa != -sb)
test(-sa != -sb)

#test LTSINT, GTSINT EQSINT (instructions for r to sr only)
test(sa < cb)
test(sa < ca)
test(sa < ca + 1)
test(-sa < ca)
test(-sb < cb)
test(sa < -cb)
test(-sa < -cb)

test(sa > cb)
test(sa > ca)
test(sa > ca + 1)
test(-sa > ca)
test(-sb > cb)
test(sa > -cb)
test(-sa > -cb)

test(sa <= cb)
test(sa <= ca)
test(sa <= ca + 1)
test(-sa <= ca)
test(-sb <= cb)
test(sa <= -cb)
test(-sa <= -cb)

test(sa >= cb)
test(sa >= ca)
test(sa >= (ca + 1))
test(-sa >= ca)
test(-sb >= cb)
test(sa >= -cb)
test(-sa >= -cb)

test(sa == cb)
test(sa == ca)
test(sa == ca + 1)
test(-sa == ca)
test(-sb == cb)
test(sa == -cb)
test(-sa == -cb)

test(sa != cb)
test(sa != ca)
test(sa != ca + 1)
test(-sa != ca)
test(-sb != cb)
test(sa != -cb)
test(-sa != -cb)


#test LTSINT, GTSINT EQSINT (instructions for r to sr only)
test(ca < sb)
test(ca < sa)
test(ca < sa + 1)
test(-ca < sa)
test(-cb < sb)
test(ca < -sb)
test(-ca < -sb)

test(ca > sb)
test(ca > sa)
test(ca > sa + 1)
test(-ca > sa)
test(-cb > sb)
test(ca > -sb)
test(-ca > -sb)

test(ca <= sb)
test(ca <= sa)
test(ca <= sa + 1)
test(-ca <= sa)
test(-cb <= sb)
test(ca <= -sb)
test(-ca <= -sb)

test(ca >= sb)
test(ca >= sa)
test(ca >= (sa + 1))
test(-ca >= sa)
test(-cb >= sb)
test(ca >= -sb)
test(-ca >= -sb)

test(ca == sb)
test(ca == sa)
test(ca == sa + 1)
test(-ca == sa)
test(-cb == sb)
test(ca == -sb)
test(-ca == -sb)

test(ca != sb)
test(ca != sa)
test(ca != sa + 1)
test(-ca != sa)
test(-cb != sb)
test(ca != -sb)
test(-ca != -sb)

# Bitwise Tests (only between sb)
sba = sa < sb # 0
sbb = sb < sa # 1

#test NEGB
test(-sba) # 1
test(-sbb) # 0

# test ANDSB
test(sba & sba)
test(sba & sbb)
test(sbb & sba)
test(sbb & sbb)

# test ORSB
test(sba | sba)
test(sba | sbb)
test(sbb | sba)
test(sbb | sbb)

# test XORSB
test(sba ^ sba)
test(sba ^ sbb)
test(sbb ^ sba)
test(sbb ^ sbb)

# test SAND
test(sa & sba)
test(sa & sbb)
test(sb & sba)
test(sb & sbb)

test(sba & sa)
test(sba & sb)
test(sbb & sa)
test(sbb & sb)

#test NEG
test(-sa)
test(-sb)

# test sregint
la = 32
lb = 4
sla = sregint(la)
slb = sregint(lb)
rla = regint(la)
rlb = regint(lb)

# test ANDSR
test(sla & sla)
test(sla & slb)
test(slb & sla)
test(slb & slb)

# test ORSR
test(sla | sla)
test(sla | slb)
test(slb | sla)
test(slb | slb)

# test XORSR
test(sla ^ sla)
test(sla ^ slb)
test(slb ^ sla)
test(slb ^ slb)

# test ANDSRR
test(sla & la)
test(sla & lb)
test(slb & la)
test(slb & lb)

# test ORSRR
test(sla | la)
test(sla | lb)
test(slb | la)
test(slb | lb)

# test XORSRR
test(sla ^ la)
test(sla ^ lb)
test(slb ^ la)
test(slb ^ lb)

# test ANDRSR
test(la & sla)
test(la & slb)
test(lb & sla)
test(lb & slb)

# test ORRSR
test(la | sla)
test(la | slb)
test(lb | sla)
test(lb | slb)

# test XORRSR
test(la ^ sla)
test(la ^ slb)
test(lb ^ sla)
test(lb ^ slb)

# test ANDRR
test(rla & la)
test(rla & lb)
test(rlb & la)
test(rlb & lb)
test(rla & rla)
test(rla & rlb)
test(rlb & rla)
test(rlb & rlb)
test(la & rla)
test(la & rlb)
test(lb & rla)
test(lb & rlb)

# test ORRR
test(rla | la)
test(rla | lb)
test(rlb | la)
test(rlb | lb)
test(rla | rla)
test(rla | rlb)
test(rlb | rla)
test(rlb | rlb)
test(la | rla)
test(la | rlb)
test(lb | rla)
test(lb | rlb)

# test XORRR
test(rla ^ la)
test(rla ^ lb)
test(rlb ^ la)
test(rlb ^ lb)
test(rla ^ rla)
test(rla ^ rlb)
test(rlb ^ rla)
test(rlb ^ rlb)
test(la ^ rla)
test(la ^ rlb)
test(lb ^ rla)
test(lb ^ rlb)


# test mult 128 bits
s64a = sregint(2 ** 62+28731371)
s64b = sregint(2 ** 62-31311)
test(s64a.mul_2_sint(s64b))

# test memory instructions
c = 1
rc = regint(c)
d = 2
rd = regint(d)

#int store and load mem
store_in_mem(sregint(a), 0)
test(sregint.load_mem(0), a)

#regint
store_in_mem(sregint(b), rd)
test(sregint.load_mem(rd), b)

