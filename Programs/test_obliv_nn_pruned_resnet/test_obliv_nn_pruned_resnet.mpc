from Compiler import matrix_lib
from Compiler import folding_lib
from Compiler import mpc_math
from Compiler import relu_lib
from Compiler import relu_parallel_lib
from Compiler.library import print_ln
import imp


#ov_pruned_resnet = imp.load_source('ov_pruned_resnet', '../obliv_nn_pruned_resnet/obliv_nn_pruned_resnet.mpc') # standard version
ov_pruned_resnet = imp.load_source('ov_pruned_resnet', 'Programs/obliv_nn_pruned_resnet/obliv_nn_pruned_resnet.mpc') # jenkins version

print_ln("----------------------------------- Testing ResNet -----------------------------------")

class bcolors:
    HEADER = '\033[95m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'


def test(actual, expected):
    total_tests = cint.load_mem(5000)
    total_tests += 1
    total_tests.store_in_mem(5000)

    if_then(actual != expected)
    print_ln(bcolors.FAIL + 'FAILURE: expected %s, got %s' + bcolors.ENDC, expected, actual)
    failed_tests = cint.load_mem(6000)
    failed_tests += 1
    failed_tests.store_in_mem(6000)
    else_then()
    print_ln(bcolors.OKGREEN + "TEST: %s equals %s" + bcolors.ENDC, expected, actual)
    end_if()


def fill_matrix_with_value(A, value):
    h = len(A)
    w = len(A[0])
    for i in range(h):
        for j in range(w):
            A[i][j] = value

    return A


def fill_matrix_with_value_per_column(A, array):
    h = len(A)
    w = len(A[0])
    for i in range(h):
        for j in range(w):
            A[i][j] = array[j]  # CONV biases

    return A


def fill_matrix_with_value_per_row(A, array):
    h = len(A)
    w = len(A[0])
    for i in range(h):
        for j in range(w):
            A[i][j] = array[i]  # FC biases

    return A


def print_secret_matrix(matrix):
    print_ln()
    n = len(matrix)
    m = len(matrix[0])

    @for_range(n)
    def f(i):
        print_str("\n")

        @for_range(m)
        def f(j):
            print_str(" %s", matrix[i][j].reveal())

    print_str("\n")


def print_secret_array(array):
    print_ln()
    n = len(array)

    print_str("\n")

    @for_range(n)
    def f(i):
        print_str(" %s", array[i].reveal())

    print_str("\n")


def print_triple(triple):
    A = triple[0]
    B = triple[1]
    C = triple[2]
    print_str("\n A \n: ")
    print_secret_matrix(A)
    print_str("\n B \n: ")
    print_secret_matrix(B)
    print_str("\n C \n: ")
    print_secret_matrix(C)


def get_fake_conv_triple(h, w, kh, kw, s, s_, padding=0, stride=1):

    w_in = w + (padding * 2)
    h_in = h + (padding * 2)

    w_out = (w_in - kw + 1)
    h_out = (h_in - kh + 1)

    if stride == 2:

        w_out_p = (w_out // stride)
        h_out_p = (h_out // stride)

        if (w_in % stride) > 0:
            w_out_p += 1

        if (h_in % stride) > 0:
            h_out_p += 1

        w_out = w_out_p
        h_out = h_out_p

    A = sint.Matrix(w_in * h_in, s)
    B = sint.Matrix(kh * kw, s * s_)
    C = sint.Matrix(w_out * h_out, s_)

    Triple = [A, B, C]

    return Triple


def get_fake_matrix_triple(h, w, kw):

    kh = w

    A = sint.Matrix(h, w)
    B = sint.Matrix(kh, kw)
    C = sint.Matrix(h, kw)

    Triple = [A, B, C]

    return Triple



### %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


def read_values(number_of_values, channel):
    open_channel_with_return(channel)

    print_ln("Player 0 starts reading channel %s", channel)
    a = sint.get_private_input_from(0, channel, size=number_of_values)
    close_channel(channel)
    print_ln("Player 0 closes channel %s", channel)

    A = Array(number_of_values, sfix)
    vstms(number_of_values, a, A.address)

    return A


# input features from channel
def get_features(w, h, s, channel):
    Features = []

    number_of_values = h * w * s

    print_ln("Player 1 introduce Input Feature - (%s values): ", number_of_values)
    A = read_values(number_of_values, channel)
    index_of_A = 0

    for k in range(s):
        Feature = sfix.Matrix(h, w)
        for i in range(h):
            for j in range(w):
                Feature[i][j] = A[index_of_A]
                index_of_A += 1
        Features.append(Feature)

    return Features


# input fc weights from channel
def get_fc_matrix(h, w, layer, channel):

    FC = sfix.Matrix(w, h)

    fc_layer_weights = h * w
    print_ln("Player 0 introduce weights for FC layer %s - (%s values): ", layer, fc_layer_weights)

    FC_array = read_values(fc_layer_weights, channel)
    array_index = 0

    for i in range(w):
        for j in range(h):
            FC[i][j] = FC_array[array_index]
            array_index += 1

    FC_tr = matrix_lib.traspose(FC)

    return FC_tr


# input kernels from channel
def get_kernels(kw, kh, s, s_, layer, channel):
    Kernels = []

    number_of_values = kh * kw * s * s_

    print_ln("Player 0 introduce kernels for CONV layer %s - (%s values): ", layer, number_of_values)
    A = read_values(number_of_values, channel)
    index_of_A = 0

    for k_ in range(s_):
        out_channel = []
        Kernels.append(out_channel)
        for k in range(s):
            Kernel = sfix.Matrix(kh, kw)
            for i in range(kh):
                for j in range(kw):
                    Kernel[i][j] = A[index_of_A]
                    index_of_A += 1
            Kernels[k_].append(Kernel)

    return Kernels


# input neurons from channel - kernels and fc weights
def generate_neurons_for_pruned_resnet():
    K = []

    K1 = get_kernels(3, 3, 3, 32, 1, 100040)
    K.append(K1)

    ###############
    ###############  COMMENT BELOW TO GET ONLY FOR FIRST LAYER
    ###############

    K2 = get_kernels(3, 3, 32, 64, 2, 100041)
    K3 = get_kernels(3, 3, 64, 128, 3, 100042)
    K4 = get_kernels(3, 3, 128, 128, 4, 100043)
    K5 = get_kernels(3, 3, 128, 256, 5, 100044)
    K6 = get_kernels(3, 3, 256, 256, 6, 100045)

    FC1 = get_fc_matrix(4096, 32, 7, 100046)
    FC2 = get_fc_matrix(32, 10, 8, 100047)

    K.append(K2)
    K.append(K3)
    K.append(K4)
    K.append(K5)
    K.append(K6)
    K.append(FC1)
    K.append(FC2)

    return K

# input beta values from channel
def generate_beta_for_resnet():

    Bt = []

    Bt1 = sfix.Matrix(32 * 32, 32)
    Bt2 = sfix.Matrix(32 * 32, 64)
    Bt3 = sfix.Matrix(16 * 16, 128)
    Bt4 = sfix.Matrix(16 * 16, 128)
    Bt5 = sfix.Matrix(8 * 8, 256)
    Bt6 = sfix.Matrix(8 * 8, 256)

    print_ln("Player 0 introduce beta values %s - (%s values): ", 1, 32)
    beta = read_values(32, 100028)
    fill_matrix_with_value_per_column(Bt1, beta)

    print_ln("Player 0 introduce beta values %s - (%s values): ", 2, 64)
    beta = read_values(64, 100029)
    fill_matrix_with_value_per_column(Bt2, beta)

    print_ln("Player 0 introduce beta values %s - (%s values): ", 3, 128)
    beta = read_values(128, 100030)
    fill_matrix_with_value_per_column(Bt3, beta)

    print_ln("Player 0 introduce beta values %s - (%s values): ", 4, 128)
    beta = read_values(128, 100031)
    fill_matrix_with_value_per_column(Bt4, beta)

    print_ln("Player 0 introduce beta values %s - (%s values): ", 5, 256)
    beta = read_values(256, 100032)
    fill_matrix_with_value_per_column(Bt5, beta)

    print_ln("Player 0 introduce beta values %s - (%s values): ", 6, 256)
    beta = read_values(256, 100033)
    fill_matrix_with_value_per_column(Bt6, beta)

    Bt.append(Bt1)
    Bt.append(Bt2)
    Bt.append(Bt3)
    Bt.append(Bt4)
    Bt.append(Bt5)
    Bt.append(Bt6)

    return Bt

# input gamma values from channel
def generate_gamma_for_resnet():

    G = []

    G1 = sfix.Matrix(32 * 32, 32)
    G2 = sfix.Matrix(32 * 32, 64)
    G3 = sfix.Matrix(16 * 16, 128)
    G4 = sfix.Matrix(16 * 16, 128)
    G5 = sfix.Matrix(8 * 8, 256)
    G6 = sfix.Matrix(8 * 8, 256)

    print_ln("Player 0 introduce gamma values %s - (%s values): ", 1, 32)
    gamma = read_values(32, 100034)
    fill_matrix_with_value_per_column(G1, gamma)

    print_ln("Player 0 introduce gamma values %s - (%s values): ", 2, 64)
    gamma = read_values(64, 100035)
    fill_matrix_with_value_per_column(G2, gamma)

    print_ln("Player 0 introduce gamma values %s - (%s values): ", 3, 128)
    gamma = read_values(128, 100036)
    fill_matrix_with_value_per_column(G3, gamma)

    print_ln("Player 0 introduce gamma values %s - (%s values): ", 4, 128)
    gamma = read_values(128, 100037)
    fill_matrix_with_value_per_column(G4, gamma)

    print_ln("Player 0 introduce gamma values %s - (%s values): ", 5, 256)
    gamma = read_values(256, 100038)
    fill_matrix_with_value_per_column(G5, gamma)

    print_ln("Player 0 introduce gamma values %s - (%s values): ", 6, 256)
    gamma = read_values(256, 100039)
    fill_matrix_with_value_per_column(G6, gamma)

    G.append(G1)
    G.append(G2)
    G.append(G3)
    G.append(G4)
    G.append(G5)
    G.append(G6)

    return G

# input biases from channel
def generate_biases_for_resnet():
    B = []

    B1 = sfix.Matrix(32 * 32, 32)
    B2 = sfix.Matrix(32 * 32, 64)
    B3 = sfix.Matrix(16 * 16, 128)
    B4 = sfix.Matrix(16 * 16, 128)
    B5 = sfix.Matrix(8 * 8, 256)
    B6 = sfix.Matrix(8 * 8, 256)
    B7 = sfix.Matrix(1, 32)
    B8 = sfix.Matrix(1, 10)

    print_ln("Player 0 introduce biases layer %s - (%s values): ", 1, 32)
    biases = read_values(32, 100020)
    fill_matrix_with_value_per_column(B1, biases)

    print_ln("Player 0 introduce biases layer %s - (%s values): ", 2, 64)
    biases = read_values(64, 100021)
    fill_matrix_with_value_per_column(B2, biases)

    print_ln("Player 0 introduce biases layer %s - (%s values): ", 3, 128)
    biases = read_values(128, 100022)
    fill_matrix_with_value_per_column(B3, biases)

    print_ln("Player 0 introduce biases layer %s - (%s values): ", 4, 128)
    biases = read_values(128, 100023)
    fill_matrix_with_value_per_column(B4, biases)

    print_ln("Player 0 introduce biases layer %s - (%s values): ", 5, 256)
    biases = read_values(256, 100024)
    fill_matrix_with_value_per_column(B5, biases)

    print_ln("Player 0 introduce biases layer %s - (%s values): ", 6, 256)
    biases = read_values(256, 100025)
    fill_matrix_with_value_per_column(B6, biases)

    ### FC LAYERS

    print_ln("Player 0 introduce biases layer %s - (%s values): ", 7, 32)
    biases = read_values(32, 100026)
    fill_matrix_with_value_per_column(B7, biases)

    print_ln("Player 0 introduce biases layer %s - (%s values): ", 8, 10)
    biases = read_values(10, 100027)
    fill_matrix_with_value_per_column(B8, biases)


    B.append(B1)
    B.append(B2)
    B.append(B3)
    B.append(B4)
    B.append(B5)
    B.append(B6)
    B.append(B7)
    B.append(B8)

    return B

# input matrix triple from channel
def input_convolutional_triple(rowsA, colsA, rowsB, colsB, rowsC, colsC, channel=0):
    from library import open_channel_with_return, input_shares, close_channel, sint

    open_channel_with_return(channel)

    inpA = [sint() for element in range(rowsA * colsA)]
    input_shares(channel, *inpA)
    A = matrix_lib.input_to_matrix(inpA, rowsA, colsA)

    inpB = [sint() for element in range(rowsB * colsB)]
    input_shares(channel, *inpB)
    B = matrix_lib.input_to_matrix(inpB, rowsB, colsB)

    inpC = [sint() for element in range(rowsC * colsC)]
    input_shares(channel, *inpC)
    C = matrix_lib.input_to_matrix(inpC, rowsC, colsC)

    close_channel(channel)

    return [A, B, C]

def read_triples_from_input_output():

    # CONV TRIP [1024,3][9,96][1024,32]
    # CONV TRIP [1024,32][9,2048][1024,64]
    # CONV TRIP [256,64][9,8192][256,128]
    # CONV TRIP [256,128][9,16384][256,128]
    # CONV TRIP [64,128][9,32768][64,256]
    # CONV TRIP [64,256][9,65536][64,256]
    # FC TRIP [1,4096][4096,32][1,32]
    # FC TRIP [1,32][32,10][1,10]

    T1 = input_convolutional_triple(1024, 3, 9, 96, 1024, 32, 777777)
    T2 = input_convolutional_triple(1024, 32, 9, 2048, 1024, 64, 777778)
    T3 = input_convolutional_triple(256, 64, 9, 8192, 256, 128, 777779)
    T4 = input_convolutional_triple(256, 128, 9, 16384, 256, 128, 777780)
    T5 = input_convolutional_triple(64, 128, 9, 32768, 64, 256, 777781)
    T6 = input_convolutional_triple(64, 256, 9, 65536, 64, 256, 777782)
    T7 = input_convolutional_triple(1, 4096, 4096, 32, 1, 32, 777783) # ACTUALLY FC TRIPLE
    T8 = input_convolutional_triple(1, 32, 32, 10, 1, 10, 777784) # ACTUALLY FC TRIPLE

    return [T1, T2, T3, T4, T5, T6, T7, T8]


def test_all_layers_for_pruned_resnet(layers_execution_result, execution_name):
    X2_layer, X3_layer, X4_layer, X5_layer, X6_layer, X7_layer, X8_layer, X9_layer = layers_execution_result

    print_ln("TESTING ALL LAYERS -- COMPARISON RESULT -- ")

    X2_transpose = matrix_lib.traspose(X2_layer) ## or maybe X_biased
    comparison_result = matrix_lib.compare_with_matrix_from_file(X2_transpose, "Data/PrunedResnetData/Outputs/" + execution_name + "/P0-ReLU_layer_3.output.txt", 64)
    print_ln("COMPARISON RESULT layer 1")
    print_ln("%s", comparison_result)
    test(comparison_result, 1)

    X3_transpose = matrix_lib.traspose(X3_layer)
    comparison_result = matrix_lib.compare_with_matrix_from_file(X3_transpose, "Data/PrunedResnetData/Outputs/" + execution_name + "/P0-Avg_pool_layer_8.output.txt", 64)
    print_ln("COMPARISON RESULT  layer 2")
    print_ln("%s", comparison_result)
    test(comparison_result, 1)

    X4_transpose = matrix_lib.traspose(X4_layer)
    comparison_result = matrix_lib.compare_with_matrix_from_file(X4_transpose, "Data/PrunedResnetData/Outputs/" + execution_name + "/P0-ReLU_layer_11.output.txt", 64)
    print_ln("COMPARISON RESULT  layer 3")
    print_ln("%s", comparison_result)
    test(comparison_result, 1)

    X5_transpose = matrix_lib.traspose(X5_layer)
    comparison_result = matrix_lib.compare_with_matrix_from_file(X5_transpose, "Data/PrunedResnetData/Outputs/" + execution_name + "/P0-Avg_pool_layer_16.output.txt", 64)
    print_ln("COMPARISON RESULT  layer 4")
    print_ln("%s", comparison_result)
    test(comparison_result, 1)

    X6_transpose = matrix_lib.traspose(X6_layer)
    comparison_result = matrix_lib.compare_with_matrix_from_file(X6_transpose, "Data/PrunedResnetData/Outputs/" + execution_name + "/P0-ReLU_layer_19.output.txt", 64)
    print_ln("COMPARISON RESULT  layer 5")
    print_ln("%s", comparison_result)
    test(comparison_result, 1)

    X7_transpose = matrix_lib.traspose(X7_layer)
    comparison_result = matrix_lib.compare_with_matrix_from_file(X7_transpose, "Data/PrunedResnetData/Outputs/" + execution_name + "/P0-Avg_pool_layer_24.output.txt", 64)
    print_ln("COMPARISON RESULT  layerr 6")
    print_ln("%s", comparison_result)
    test(comparison_result, 1)

    X8_transpose = matrix_lib.traspose(X8_layer)
    comparison_result = matrix_lib.compare_with_matrix_from_file(X8_transpose, "Data/PrunedResnetData/Outputs/" + execution_name + "/P0-ReLU_layer_28.output.txt", 128)
    print_ln("COMPARISON RESULT  layer 7")
    print_ln("%s", comparison_result)
    test(comparison_result, 1)

    X9_transpose = matrix_lib.traspose(X9_layer)
    comparison_result = matrix_lib.compare_with_matrix_from_file(X9_transpose, "Data/PrunedResnetData/Outputs/" + execution_name + "/P0-Linear_layer_29.output.txt", 512)
    print_ln("COMPARISON RESULT layer 8")
    print_ln("%s", comparison_result)
    test(comparison_result, 1)

    print_ln("OUTPUT FINAL LAYER")
    print_secret_matrix(X9_layer)


def test_pruned_resnet_with_real_values():

    F = get_features(32, 32, 3, 90050)

    padding = 1
    stride = 1


    ### The triples are not real, are jusst zero matrixes
    # T = read_triples_from_input_output()
    T1 = get_fake_conv_triple(32, 32, 3, 3, 3, 32, padding, stride)
    T2 = get_fake_conv_triple(32, 32, 3, 3, 32, 64, padding, stride)
    T3 = get_fake_conv_triple(16, 16, 3, 3, 64, 128, padding, stride)
    T4 = get_fake_conv_triple(16, 16, 3, 3, 128, 128, padding, stride)
    T5 = get_fake_conv_triple(8, 8, 3, 3, 128, 256, padding, stride)
    T6 = get_fake_conv_triple(8, 8, 3, 3, 256, 256, padding, stride)
    T7 = get_fake_matrix_triple(1, 4 * 4 * 256, 32)
    T8 = get_fake_matrix_triple(1, 32, 10)

    T = [T1, T2, T3, T4, T5, T6, T7, T8]

    K = generate_neurons_for_pruned_resnet()
    B = generate_biases_for_resnet()
    G = generate_gamma_for_resnet()
    Bt = generate_beta_for_resnet()

    start_timer(1)
    Y = ov_pruned_resnet.oblivious_pruned_resnet(F, K, B, G, Bt, T)
    stop_timer(1)

    test_all_layers_for_pruned_resnet(Y, "Execution_0")


#############   >TEST-ResNet<   #############
#############   #############   #############
#############   #############   #############

test_pruned_resnet_with_real_values()



