from Compiler import matrix_lib

print_ln("----------------------------------- Testing Fc layer -----------------------------------")


class bcolors:
    HEADER = '\033[95m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

def test(actual, expected):
    total_tests = cint.load_mem(5000)
    total_tests += 1
    total_tests.store_in_mem(5000)

    if_then(actual != expected)
    print_ln(bcolors.FAIL + 'FAILURE: expected %s, got %s' + bcolors.ENDC, expected, actual)
    failed_tests = cint.load_mem(6000)
    failed_tests += 1
    failed_tests.store_in_mem(6000)
    else_then()
    print_ln(bcolors.OKGREEN + "TEST: %s equals %s" + bcolors.ENDC, expected, actual)
    end_if()

def fill_matrix_with_value(A, value):

    h = len(A)
    w = len(A[0])
    for i in range(h):
        for j in range(w):
            A[i][j] = value
    return A

def print_secret_matrix(matrix):
    print_ln()
    n = len(matrix)
    m = len(matrix[0])

    @for_range(n)
    def f(i):
        print_str("\n")
        @for_range(m)
        def f(j):
            print_str(" %s", matrix[i][j].reveal())

    print_str("\n")

def print_secret_array(array):
    print_ln()
    n = len(array)

    print_str("\n")
    @for_range(n)
    def f(i):
        print_str(" %s", array[i].reveal())

    print_str("\n")

def get_inefficient_matrix_triple(rowsA, colsA, colsB, value, timers = 1):


    A = sint.Matrix(rowsA, colsA)
    A = fill_matrix_with_value(A, value)

    B = sint.Matrix(colsA, colsB)
    B = fill_matrix_with_value(B, value)

    if timers:
        start_timer(1)

    C = matrix_lib.mult_matrixes(A, B)

    if timers:
        stop_timer(1)

    triple = [A, B, C]

    return triple


def get_vector_matrix_triple_from_matrix_triple(A, B, C, index):
    from Compiler import matrix_lib

    rowsA = len(A)
    colsA = len(A[0])
    colsB = len(B[0])

    A_ = sint.Matrix(1,colsA)
    B_ = B
    C_ = sint.Matrix(1,colsB)

    for i in range(colsA):
        A_[0][i] = A[index][i]
    for i in range(colsB):
        C_[0][i] = C[index][i]

    triple = [A_, B_, C_]

    return triple

def perform_inefficient_fc_layer(A, B, timers = 1):
    from Compiler import matrix_lib

    if timers:
        start_timer(2)

    C = matrix_lib.mult_matrixes(A, B)

    if timers:
        stop_timer(2)

    return C

def get_FC_parameters_and_flatten_feature(feature_size, neurons, valueA, valueB):
    from Compiler import matrix_lib

    A = sint.Matrix(1, feature_size)
    A = fill_matrix_with_value(A, valueA)

    B = sint.Matrix(feature_size, neurons)
    B = fill_matrix_with_value(B, valueB)

    tuple = [A, B]

    return tuple

def perform_fc_layer(X, Y, A, B, C):
    from Compiler import matrix_lib

    Z = matrix_lib.multmat_sint2sint(X, Y, A, B, C)
    return Z

def print_triple(triple):

    A = triple[0]
    B = triple[1]
    C = triple[2]
    print_str("\n A \n: ")
    print_secret_matrix(A)
    print_str("\n B \n: ")
    print_secret_matrix(B)
    print_str("\n C \n: ")
    print_secret_matrix(C)

def print_tuple(tuple):

    A = tuple[0]
    B = tuple[1]
    print_str("\n X \n: ")
    print_secret_matrix(A)
    print_str("\n Y \n: ")
    print_secret_matrix(B)

def tests_delete(size):
    from Compiler import matrix_lib

    A = sint.Matrix(size,size)
    B = cint.Matrix(size,size)

    fill_matrix_with_value(A, 2)
    fill_matrix_with_value(B, 2)

    C = matrix_lib.mult_sint2cint(A, B)

def test_fc_layer(timers = 1):

    features = 2
    feature_size = 12
    neurons = 8

    index = 0
    fake_value_for_testing = 1
    fake_feature_value = 2
    fake_neurons_value = 3

    input_matrices = get_FC_parameters_and_flatten_feature(feature_size, neurons, fake_feature_value, fake_neurons_value)
    print_str("\n Feature and Neuron parameters: \n: ")
    print_tuple(input_matrices)

    X = input_matrices[0]
    Y = input_matrices[1]

    Z1 = perform_inefficient_fc_layer(X, Y, timers)

    m_triple = get_inefficient_matrix_triple(features, feature_size, neurons, fake_value_for_testing, timers)
    v_triple = get_vector_matrix_triple_from_matrix_triple(m_triple[0], m_triple[1], m_triple[2], index)

    print_str("\n print matrix triple values: \n: ")
    print_triple(m_triple)
    print_str("\n print vector-matrix triple values: \n: ")
    print_triple(v_triple)

    if (timers):
        start_timer(3)

    Z2 = perform_fc_layer(X,Y,v_triple[0], v_triple[1], v_triple[2])

    if (timers):
        stop_timer(3)

    print_str("\n the output is: \n: ")
    print_secret_matrix(Z2)

    print_str("\n the output should be: \n: ")
    print_secret_matrix(Z1)

    test((Z1 == Z2).reveal(), 1)

#### throw tests

timers = 0
test_fc_layer(timers)
print_str("\n \n TESTS:" + bcolors.OKGREEN + " %s" + bcolors.ENDC + "/" + bcolors.FAIL + "%s failed" + bcolors.ENDC + "\n \n", cint.load_mem(5000), cint.load_mem(6000))







