import floatingpoint

# Use IEEE equivalent sizes
sfloat.plen=11
sfloat.vlen=53
sfloat.kappa=40
# Means we need 148 bit prime at least

# Number of loops for timing
n=500

FP_add=120
FP_mul=121
FP_div=122
FP_eq=123
FP_f2i=124
FP_i2f=125
FP_sqrt=126
FP_lt=127

r0=convert_to_float("3.125")
print_ieee_float(r0)
print_ln("")
print_int(r0)
print_ln("")

r1=convert_to_float("1.25")
print_ieee_float(r1)
print_ln("")

r2=convert_to_float("-6.535353")
print_ieee_float(r2)
print_ln("")

r3=convert_to_float("199.3231")
print_ieee_float(r3)
print_ln("")

s0=sregint(r0)
s1=sregint(r1)
s2=sregint(r2)
s3=sregint(r3)

# A non-timed execution here to warm up the GC engine,
# and load all the circuits
sregint.push(s0)
sregint.push(s0)
sregint.push(s0)
sregint.push(s0)
sregint.push(s0)
GC(FP_add)
GC(FP_mul)
GC(FP_div)
GC(FP_lt)
GC(FP_sqrt)
sregint.pop()

print_ln("GC + ")
@for_range(n+1)
def loop_body(i):
  sregint.push(s0)
start_timer(1)
@for_range(n)
def loop_body(i):
  GC(FP_add)
stop_timer(1)
s4=sregint.pop()


print_ln("GC * ")
@for_range(n+1)
def loop_body(i):
  sregint.push(s0)
start_timer(1)
@for_range(n)
def loop_body(i):
  GC(FP_mul)
stop_timer(1)
s4=sregint.pop()


print_ln("GC / ")
@for_range(n+1)
def loop_body(i):
  sregint.push(s0)
start_timer(1)
@for_range(n)
def loop_body(i):
  GC(FP_div)
stop_timer(1)
s4=sregint.pop()

print_ln("GC sqrt ")
sregint.push(s0)
start_timer(1)
@for_range(n)
def loop_body(i):
  GC(FP_sqrt)
stop_timer(1)
s4=sregint.pop()

print_ln("GC < ")
@for_range(n+1)
def loop_body(i):
  sregint.push(s0)
start_timer(1)
@for_range(n)
def loop_body(i):
  GC(FP_lt)
stop_timer(1)
s4=sregint.pop()


x=sfloat(-.3133131)
y=sfloat(45.54242)

print_ln("")
print_ln("")
print_ln("sfloat +")
start_timer(1)
@for_range(n)
def loop_body(i):
  z=x+y
stop_timer(1)

print_ln("")
print_ln("sfloat *")
start_timer(1)
@for_range(n)
def loop_body(i):
  z=x*y
stop_timer(1)

print_ln("")
print_ln("sfloat /")
start_timer(1)
@for_range(n)
def loop_body(i):
  z=x/y
stop_timer(1)

print_ln("")
print_ln("sfloat <")
start_timer(1)
@for_range(n)
def loop_body(i):
  z=x<y
stop_timer(1)


x=sfix(-.3133131)
y=sfix(45.54242)

print_ln("")
print_ln("")
print_ln("sfix +")
start_timer(1)
@for_range(n)
def loop_body(i):
  z=x+y
stop_timer(1)

print_ln("")
print_ln("sfix *")
start_timer(1)
@for_range(n)
def loop_body(i):
  z=x*y
stop_timer(1)

print_ln("")
print_ln("sfix /")
start_timer(1)
@for_range(n)
def loop_body(i):
  z=x/y
stop_timer(1)

print_ln("")
print_ln("sfix sqrt")
start_timer(1)
@for_range(n)
def loop_body(i):
  z=mpc_math.sqrt(x)
stop_timer(1)

print_ln("")
print_ln("sfix <")
start_timer(1)
@for_range(n)
def loop_body(i):
  z=x<y
stop_timer(1)

# Now test the conversion
x=sfloat(5.125)
z=sregint(0)
w=sfloat(0)

print_ln("")
print_ln("convert sfloat->ieee")
start_timer(1)
@for_range(n)
def loop_body(i):
  y=floatingpoint.sfloat_to_ieee(x)
stop_timer(1)

print_ln("")
print_ln("convert ieee->sfloat")
y=floatingpoint.sfloat_to_ieee(x)
start_timer(1)
@for_range(n)
def loop_body(i):
  x=floatingpoint.ieee_to_sfloat(y)
stop_timer(1)

print_ln("Remember to divide all times by %s",n)

