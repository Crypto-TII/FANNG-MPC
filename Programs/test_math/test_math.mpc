a = sfix(-7.5)
b = sfix(-6)
c = sfix(-4.5)
d = sfix(-3)

e = sfix(3)
f = sfix(4.5)
g = sfix(6)
h = sfix(7.5)

# Test sin
print_ln("Testing sin (fxp)")
test(mpc_math.test_sin_fx(a))
test(mpc_math.test_sin_fx(b))
test(mpc_math.test_sin_fx(c))
test(mpc_math.test_sin_fx(d))

test(mpc_math.test_sin_fx(e))
test(mpc_math.test_sin_fx(f))
test(mpc_math.test_sin_fx(g))
test(mpc_math.test_sin_fx(h))

## Test cos
print_ln("Testing cos (fxp)")
test(mpc_math.test_cos_fx(a))
test(mpc_math.test_cos_fx(b))
test(mpc_math.test_cos_fx(c))
test(mpc_math.test_cos_fx(d))

test(mpc_math.test_cos_fx(e))
test(mpc_math.test_cos_fx(f))
test(mpc_math.test_cos_fx(g))
test(mpc_math.test_cos_fx(h))

# Test tan
print_ln("Testing tan (fxp)")
test(mpc_math.test_tan_fx(a))
test(mpc_math.test_tan_fx(b))
test(mpc_math.test_tan_fx(c))
test(mpc_math.test_tan_fx(d))

test(mpc_math.test_tan_fx(f))
test(mpc_math.test_tan_fx(e))
test(mpc_math.test_tan_fx(g))
test(mpc_math.test_tan_fx(h))

a = sfloat(-7.5)
b = sfloat(-6)
c = sfloat(-4.5)
d = sfloat(-3)

e = sfloat(3)
f = sfloat(4.5)
g = sfloat(6)
h = sfloat(7.5)

## Test sin
print_ln("Testing sin (float)")
test(mpc_math.test_sin_float(a))
test(mpc_math.test_sin_float(b))
test(mpc_math.test_sin_float(c))
test(mpc_math.test_sin_float(d))

test(mpc_math.test_sin_float(e))
test(mpc_math.test_sin_float(f))
test(mpc_math.test_sin_float(g))
test(mpc_math.test_sin_float(h))

## Test cos
print_ln("Testing cos (float)")
test(mpc_math.test_cos_float(a))
test(mpc_math.test_cos_float(b))
test(mpc_math.test_cos_float(c))
test(mpc_math.test_cos_float(d))

test(mpc_math.test_cos_float(e))
test(mpc_math.test_cos_float(f))
test(mpc_math.test_cos_float(g))
test(mpc_math.test_cos_float(h))

# Test tan
print_ln("Testing tan (float)")
# prec = -4  means that it tolerates a 
# 4 bits loose of precision out of 
# the 24, currently supported by this 
# instantiation.
# Effective precision is 20 bits for tan
# under this configuration
test(mpc_math.test_tan_float(a), prec = -4)
test(mpc_math.test_tan_float(b))
test(mpc_math.test_tan_float(c), prec = -4)
test(mpc_math.test_tan_float(d))

test(mpc_math.test_tan_float(f), prec = -4)
test(mpc_math.test_tan_float(e))
test(mpc_math.test_tan_float(g))
test(mpc_math.test_tan_float(h), prec = -4)

#test arc functions

# Test asin
print_ln("Testing asin (fxp)")
a = sfix(0.1)
b = sfix(0.3)
c = sfix(0.5)
d = sfix(0.9)
e = sfix(-0.1)
f = sfix(-0.3)
g = sfix(-0.5)
h = sfix(-0.9)

test(mpc_math.asin(a))
test(mpc_math.asin(b))
test(mpc_math.asin(c))
test(mpc_math.asin(d))
test(mpc_math.asin(e))
test(mpc_math.asin(f))
test(mpc_math.asin(g))
test(mpc_math.asin(h))


# Test acos
print_ln("Testing acos (fxp)")
test(mpc_math.acos(a))
test(mpc_math.acos(b))
test(mpc_math.acos(c))
test(mpc_math.acos(d))
test(mpc_math.acos(e))
test(mpc_math.acos(f))
test(mpc_math.acos(g))
test(mpc_math.acos(h))

# Test atan
print_ln("Testing atan (fxp)")
test(mpc_math.atan(a))
test(mpc_math.atan(b))
test(mpc_math.atan(c))
test(mpc_math.atan(d))

test(mpc_math.atan(f))
test(mpc_math.atan(e))
test(mpc_math.atan(g))
test(mpc_math.atan(h))

a = sfix(2)
b = sfix(3)
c = sfix(4)
d = sfix(5)

sfloat.vlen = 15   # Length of mantissa in bits
sfloat.plen = 10   # Length of exponent in bits
sfloat.kappa = 4  # Statistical security parameter for floats
# Test log_2
print_ln("Testing log_2 (fxp)")
test(mpc_math.log2_fx(a))
test(mpc_math.log2_fx(b))
test(mpc_math.log2_fx(c))
test(mpc_math.log2_fx(d))

# Test exp_2
print_ln("Testing exp_2 (fxp)")
test(mpc_math.exp2_fx(a))
test(mpc_math.exp2_fx(b))
test(mpc_math.exp2_fx(c))
test(mpc_math.exp2_fx(d))

# Test pow
print_ln("Testing pow (fxp)")
test(mpc_math.pow_fx(a,2),lower=3.9999, upper=4.0001)
test(mpc_math.pow_fx(b,2),lower=8.9999, upper=9.0001)
test(mpc_math.pow_fx(c,2),lower=15.9999, upper=16.0001)
test(mpc_math.pow_fx(d,2),lower=24.9999, upper=25.0001)

# Test log
print_ln("Testing log (fxp)")
test(mpc_math.log_fx(a,3))
test(mpc_math.log_fx(b,3))
test(mpc_math.log_fx(c,3))
test(mpc_math.log_fx(d,3))

