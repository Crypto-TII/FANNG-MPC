from Compiler import matrix_lib
from Compiler import folding_lib
from Compiler import mpc_math


class bcolors:
    HEADER = '\033[95m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'


def test(actual, expected):
    total_tests = cint.load_mem(5000)
    total_tests += 1
    total_tests.store_in_mem(5000)

    if_then(actual != expected)
    print_ln(bcolors.FAIL + 'FAILURE: expected %s, got %s' + bcolors.ENDC, expected, actual)
    failed_tests = cint.load_mem(6000)
    failed_tests += 1
    failed_tests.store_in_mem(6000)
    else_then()
    print_ln(bcolors.OKGREEN + "TEST: %s equals %s" + bcolors.ENDC, expected, actual)
    end_if()


def fill_matrix_with_value(A, value):

    h = len(A)
    w = len(A[0])
    for i in range(h):
        for j in range(w):
            A[i][j] = value

    return A


def fill_matrix_incremental(A):

    value = 1
    h = len(A)
    w = len(A[0])
    for i in range(h):
        for j in range(w):
            A[i][j] = value
            value = value + 1

    return A


def print_secret_matrix(matrix):
    print_ln()
    n = len(matrix)
    m = len(matrix[0])

    @for_range(n)
    def f(i):
        print_str("\n")
        @for_range(m)
        def f(j):
            print_str(" %s", matrix[i][j].reveal())

    print_str("\n")


def flatten_matrix(T1, h, w):

    T2 = sfix.Array(h*w)

    for i in range(h):
        for j in range(w):
            T2[(i*w) + j] = T1[i][j]

    return T2


def test_input_processing(timers):

    h = 5
    w = 5

    M1 = sfix.Matrix(h,w)
    M2 = sfix.Matrix(h,w)
    M3 = sfix.Matrix(h,w)

    fill_matrix_incremental(M1)
    fill_matrix_incremental(M2)
    fill_matrix_incremental(M3)

    print_secret_matrix(M1)

    M = [M1, M2, M3]

    M_mean = folding_lib.get_mean(M)
    M_var = folding_lib.get_variance(M)
    [M_max, M_min] = folding_lib.get_min_and_max(M)

    M_standardized = folding_lib.input_standardization(M, M_mean, M_var)
    M_normalized = folding_lib.input_normalization(M, M_max, M_min)

    print_secret_matrix(M_standardized[0])
    print_secret_matrix(M_normalized[0])

    print_str("Mean %s\n", M_mean.reveal())
    print_str("Variance %s\n", M_var.reveal())
    print_str("Min %s\n", M_min.reveal())
    print_str("Max %s\n", M_max.reveal())

    test((M_standardized[0][h-1][w-1].reveal() < 0.231)  and (M_standardized[0][h-1][w-1].reveal() > 0.230), 1)
    test((M_normalized[0][h-1][w-1].reveal() < 1.01)  and (M_normalized[0][h-1][w-1].reveal() > 0.99), 1)


#######   THROW TESTS
#######   THROW TESTS
#######   THROW TESTS

total_tests = cint(0)
total_tests_mem = total_tests.store_in_mem(5000)
failed_tests = cint(0)
failed_tests_mem = failed_tests.store_in_mem(6000)

timers = 0
test_input_processing(timers)

print_str("\n \n TESTS:" + bcolors.OKGREEN + " %s" + bcolors.ENDC + "/" + bcolors.FAIL + "%s failed" + bcolors.ENDC + "\n \n", cint.load_mem(5000), cint.load_mem(6000))






